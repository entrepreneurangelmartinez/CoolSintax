
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 05 11:46:17 CDT 2015
//----------------------------------------------------

package ejemplocup;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 05 11:46:17 CDT 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\005\000\002\013\003\000\002\013\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\006\006\000\002\007\004\000\002\007\007\000\002\014" +
    "\004\000\002\014\003\000\002\014\003\000\002\015\012" +
    "\000\002\015\014\000\002\015\015\000\002\015\007\000" +
    "\002\015\005\000\002\016\005\000\002\016\003\000\002" +
    "\020\004\000\002\020\003\000\002\020\003\000\002\017" +
    "\006\000\002\023\005\000\002\023\014\000\002\023\010" +
    "\000\002\023\006\000\002\023\005\000\002\023\012\000" +
    "\002\023\004\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\003\000" +
    "\002\025\005\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\021\006\001\002\000\006\002\201\021" +
    "\006\001\002\000\006\002\uffff\021\uffff\001\002\000\016" +
    "\015\015\016\007\017\013\020\010\063\012\064\014\001" +
    "\002\000\046\006\ufff9\014\ufff9\022\ufff9\024\ufff9\027\ufff9" +
    "\033\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\060\ufff9\061\ufff9\067\ufff9" +
    "\001\002\000\046\006\ufff6\014\ufff6\022\ufff6\024\ufff6\027" +
    "\ufff6\033\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\054\ufff6\055\ufff6\056\ufff6\060\ufff6\061\ufff6\067" +
    "\ufff6\001\002\000\006\027\021\050\016\001\002\000\046" +
    "\006\ufff7\014\ufff7\022\ufff7\024\ufff7\027\ufff7\033\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\060\ufff7\061\ufff7\067\ufff7\001\002\000" +
    "\046\006\ufffb\014\ufffb\022\ufffb\024\ufffb\027\ufffb\033\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\060\ufffb\061\ufffb\067\ufffb\001\002" +
    "\000\046\006\ufff8\014\ufff8\022\ufff8\024\ufff8\027\ufff8\033" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\060\ufff8\061\ufff8\067\ufff8\001" +
    "\002\000\046\006\ufffa\014\ufffa\022\ufffa\024\ufffa\027\ufffa" +
    "\033\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\060\ufffa\061\ufffa\067\ufffa" +
    "\001\002\000\010\051\030\061\031\067\027\001\002\000" +
    "\006\002\ufffc\021\ufffc\001\002\000\006\002\ufffd\021\ufffd" +
    "\001\002\000\016\015\015\016\007\017\013\020\010\063" +
    "\012\064\014\001\002\000\006\002\ufffe\021\ufffe\001\002" +
    "\000\004\050\016\001\002\000\004\006\025\001\002\000" +
    "\006\002\ufff5\021\ufff5\001\002\000\006\006\ufff1\067\ufff1" +
    "\001\002\000\006\013\037\057\040\001\002\000\010\002" +
    "\ufff4\006\ufff4\021\ufff4\001\002\000\006\006\ufff0\067\ufff0" +
    "\001\002\000\006\006\034\067\027\001\002\000\006\006" +
    "\ufff2\067\ufff2\001\002\000\004\051\035\001\002\000\004" +
    "\006\036\001\002\000\010\002\ufff3\006\ufff3\021\ufff3\001" +
    "\002\000\010\014\137\061\142\067\140\001\002\000\016" +
    "\015\015\016\007\017\013\020\010\063\012\064\014\001" +
    "\002\000\010\006\uffeb\047\042\067\uffeb\001\002\000\024" +
    "\013\051\025\054\037\045\042\056\061\052\062\050\065" +
    "\047\066\043\067\057\001\002\000\046\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\014\uffce\022\uffce\024\uffce\033" +
    "\uffce\044\uffce\045\uffce\046\uffce\051\uffce\054\uffce\055\uffce" +
    "\056\uffce\060\uffce\067\uffce\001\002\000\042\006\uffd8\007" +
    "\076\010\077\014\uffd8\022\uffd8\024\uffd8\033\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\051\uffd8\054\uffd8\055\uffd8\056\uffd8\060" +
    "\uffd8\067\uffd8\001\002\000\016\015\015\016\007\017\013" +
    "\020\010\063\012\064\014\001\002\000\046\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2\022\uffd2\024\uffd2" +
    "\033\uffd2\044\uffd2\045\uffd2\046\uffd2\051\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\060\uffd2\067\uffd2\001\002\000\046\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\022\uffcf\024" +
    "\uffcf\033\uffcf\044\uffcf\045\uffcf\046\uffcf\051\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\060\uffcf\067\uffcf\001\002\000\024\013" +
    "\051\025\054\037\045\042\056\061\052\062\050\065\047" +
    "\066\043\067\057\001\002\000\024\013\051\025\054\037" +
    "\045\042\056\061\052\062\050\065\047\066\043\067\057" +
    "\001\002\000\046\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\014\uffcb\022\uffcb\024\uffcb\033\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\051\uffcb\054\uffcb\055\uffcb\056\uffcb\060\uffcb\067" +
    "\uffcb\001\002\000\046\006\uffd5\007\uffd5\010\uffd5\011\101" +
    "\012\102\014\uffd5\022\uffd5\024\uffd5\033\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\051\uffd5\054\uffd5\055\uffd5\056\uffd5\060\uffd5" +
    "\067\uffd5\001\002\000\046\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\014\uffcc\022\uffcc\024\uffcc\033\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\051\uffcc\054\uffcc\055\uffcc\056\uffcc\060" +
    "\uffcc\067\uffcc\001\002\000\022\006\uffec\044\071\045\073" +
    "\046\070\055\067\056\072\060\064\067\uffec\001\002\000" +
    "\046\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\014\uffcd" +
    "\022\uffcd\024\uffcd\033\uffcd\044\uffcd\045\uffcd\046\uffcd\051" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\060\uffcd\067\uffcd\001\002" +
    "\000\052\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\061\014\uffd0\022\uffd0\024\uffd0\033\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\060\051\uffd0\054\uffd0\055\uffd0\056\uffd0\060" +
    "\uffd0\067\uffd0\001\002\000\020\013\051\025\054\042\056" +
    "\061\052\065\047\066\043\067\075\001\002\000\026\013" +
    "\051\014\062\025\054\037\045\042\056\061\052\062\050" +
    "\065\047\066\043\067\057\001\002\000\036\006\uffe0\014" +
    "\uffe0\022\uffe0\024\uffe0\033\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\051\uffe0\054\uffe0\055\uffe0\056\uffe0\060\uffe0\067\uffe0\001" +
    "\002\000\022\014\066\044\071\045\073\046\070\054\065" +
    "\055\067\056\072\060\064\001\002\000\020\013\051\025" +
    "\054\042\056\061\052\065\047\066\043\067\075\001\002" +
    "\000\024\013\051\025\054\037\045\042\056\061\052\062" +
    "\050\065\047\066\043\067\057\001\002\000\036\006\uffe1" +
    "\014\uffe1\022\uffe1\024\uffe1\033\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\051\uffe1\054\uffe1\055\uffe1\056\uffe1\060\uffe1\067\uffe1" +
    "\001\002\000\016\015\015\016\007\017\013\020\010\063" +
    "\012\064\014\001\002\000\020\013\051\025\054\042\056" +
    "\061\052\065\047\066\043\067\075\001\002\000\020\013" +
    "\051\025\054\042\056\061\052\065\047\066\043\067\075" +
    "\001\002\000\020\013\051\025\054\042\056\061\052\065" +
    "\047\066\043\067\075\001\002\000\020\013\051\025\054" +
    "\042\056\061\052\065\047\066\043\067\075\001\002\000" +
    "\042\006\uffdc\007\076\010\077\014\uffdc\022\uffdc\024\uffdc" +
    "\033\uffdc\044\uffdc\045\uffdc\046\uffdc\051\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\060\uffdc\067\uffdc\001\002\000\046\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0\022\uffd0\024" +
    "\uffd0\033\uffd0\044\uffd0\045\uffd0\046\uffd0\051\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\060\uffd0\067\uffd0\001\002\000\020\013" +
    "\051\025\054\042\056\061\052\065\047\066\043\067\075" +
    "\001\002\000\020\013\051\025\054\042\056\061\052\065" +
    "\047\066\043\067\075\001\002\000\046\006\uffd6\007\uffd6" +
    "\010\uffd6\011\101\012\102\014\uffd6\022\uffd6\024\uffd6\033" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\051\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\060\uffd6\067\uffd6\001\002\000\020\013\051\025" +
    "\054\042\056\061\052\065\047\066\043\067\075\001\002" +
    "\000\020\013\051\025\054\042\056\061\052\065\047\066" +
    "\043\067\075\001\002\000\046\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\014\uffd3\022\uffd3\024\uffd3\033\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\051\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\060\uffd3\067\uffd3\001\002\000\046\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\014\uffd4\022\uffd4\024\uffd4\033\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\051\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\060\uffd4\067\uffd4\001\002\000\046\006\uffd7\007\uffd7" +
    "\010\uffd7\011\101\012\102\014\uffd7\022\uffd7\024\uffd7\033" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\051\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\060\uffd7\067\uffd7\001\002\000\042\006\uffd9\007" +
    "\076\010\077\014\uffd9\022\uffd9\024\uffd9\033\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\051\uffd9\054\uffd9\055\uffd9\056\uffd9\060" +
    "\uffd9\067\uffd9\001\002\000\042\006\uffdb\007\076\010\077" +
    "\014\uffdb\022\uffdb\024\uffdb\033\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\051\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\067\uffdb" +
    "\001\002\000\042\006\uffdd\007\076\010\077\014\uffdd\022" +
    "\uffdd\024\uffdd\033\uffdd\044\uffdd\045\uffdd\046\uffdd\051\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\060\uffdd\067\uffdd\001\002\000" +
    "\004\060\112\001\002\000\004\067\113\001\002\000\004" +
    "\013\114\001\002\000\024\013\051\025\054\037\045\042" +
    "\056\061\052\062\050\065\047\066\043\067\057\001\002" +
    "\000\020\044\071\045\073\046\070\054\116\055\067\056" +
    "\072\060\064\001\002\000\024\013\051\025\054\037\045" +
    "\042\056\061\052\062\050\065\047\066\043\067\057\001" +
    "\002\000\020\014\120\044\071\045\073\046\070\055\067" +
    "\056\072\060\064\001\002\000\036\006\uffe3\014\uffe3\022" +
    "\uffe3\024\uffe3\033\uffe3\044\uffe3\045\uffe3\046\uffe3\051\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\060\uffe3\067\uffe3\001\002\000" +
    "\020\014\122\044\071\045\073\046\070\055\067\056\072" +
    "\060\064\001\002\000\036\006\uffe2\014\uffe2\022\uffe2\024" +
    "\uffe2\033\uffe2\044\uffe2\045\uffe2\046\uffe2\051\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\060\uffe2\067\uffe2\001\002\000\042\006" +
    "\uffda\007\076\010\077\014\uffda\022\uffda\024\uffda\033\uffda" +
    "\044\uffda\045\uffda\046\uffda\051\uffda\054\uffda\055\uffda\056" +
    "\uffda\060\uffda\067\uffda\001\002\000\042\006\uffe4\007\076" +
    "\010\077\014\uffe4\022\uffe4\024\uffe4\033\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\051\uffe4\054\uffe4\055\uffe4\056\uffe4\060\uffe4" +
    "\067\uffe4\001\002\000\020\014\126\044\071\045\073\046" +
    "\070\055\067\056\072\060\064\001\002\000\046\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1\022\uffd1\024" +
    "\uffd1\033\uffd1\044\uffd1\045\uffd1\046\uffd1\051\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\060\uffd1\067\uffd1\001\002\000\020\033" +
    "\130\044\071\045\073\046\070\055\067\056\072\060\064" +
    "\001\002\000\024\013\051\025\054\037\045\042\056\061" +
    "\052\062\050\065\047\066\043\067\057\001\002\000\020" +
    "\022\132\044\071\045\073\046\070\055\067\056\072\060" +
    "\064\001\002\000\024\013\051\025\054\037\045\042\056" +
    "\061\052\062\050\065\047\066\043\067\057\001\002\000" +
    "\020\024\134\044\071\045\073\046\070\055\067\056\072" +
    "\060\064\001\002\000\004\006\135\001\002\000\036\006" +
    "\uffdf\014\uffdf\022\uffdf\024\uffdf\033\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\051\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\067" +
    "\uffdf\001\002\000\036\006\uffde\014\uffde\022\uffde\024\uffde" +
    "\033\uffde\044\uffde\045\uffde\046\uffde\051\uffde\054\uffde\055" +
    "\uffde\056\uffde\060\uffde\067\uffde\001\002\000\004\057\173" +
    "\001\002\000\004\057\171\001\002\000\010\014\145\054" +
    "\143\061\147\001\002\000\010\014\uffe9\054\uffe9\061\uffe9" +
    "\001\002\000\004\067\166\001\002\000\006\014\uffe7\054" +
    "\uffe7\001\002\000\004\006\160\001\002\000\006\014\151" +
    "\054\143\001\002\000\006\014\uffe6\054\uffe6\001\002\000" +
    "\006\014\uffe8\054\uffe8\001\002\000\004\006\152\001\002" +
    "\000\004\057\153\001\002\000\016\015\015\016\007\017" +
    "\013\020\010\063\012\064\014\001\002\000\004\050\155" +
    "\001\002\000\024\013\051\025\054\037\045\042\056\061" +
    "\052\062\050\065\047\066\043\067\057\001\002\000\020" +
    "\044\071\045\073\046\070\051\157\055\067\056\072\060" +
    "\064\001\002\000\006\006\uffed\067\uffed\001\002\000\004" +
    "\057\161\001\002\000\016\015\015\016\007\017\013\020" +
    "\010\063\012\064\014\001\002\000\004\050\163\001\002" +
    "\000\024\013\051\025\054\037\045\042\056\061\052\062" +
    "\050\065\047\066\043\067\057\001\002\000\020\044\071" +
    "\045\073\046\070\051\165\055\067\056\072\060\064\001" +
    "\002\000\006\006\uffee\067\uffee\001\002\000\004\057\167" +
    "\001\002\000\016\015\015\016\007\017\013\020\010\063" +
    "\012\064\014\001\002\000\006\014\uffe5\054\uffe5\001\002" +
    "\000\016\015\015\016\007\017\013\020\010\063\012\064" +
    "\014\001\002\000\010\014\uffea\054\uffea\061\uffea\001\002" +
    "\000\016\015\015\016\007\017\013\020\010\063\012\064" +
    "\014\001\002\000\004\050\175\001\002\000\024\013\051" +
    "\025\054\037\045\042\056\061\052\062\050\065\047\066" +
    "\043\067\057\001\002\000\020\044\071\045\073\046\070" +
    "\051\177\055\067\056\072\060\064\001\002\000\006\006" +
    "\uffef\067\uffef\001\002\000\006\002\001\021\001\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\006\002\003\005\004\001\001\000\004\005" +
    "\177\001\001\000\002\001\001\000\004\011\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\017\007" +
    "\016\013\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\031\015" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\022\001\001\000\002\001\001\000\004\007\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\140\001" +
    "\001\000\004\011\040\001\001\000\002\001\001\000\012" +
    "\022\043\023\054\024\052\025\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\043\023\126\024" +
    "\052\025\045\001\001\000\012\022\043\023\124\024\052" +
    "\025\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\123\024\052\025\045\001\001\000" +
    "\012\022\043\023\062\024\052\025\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\122\024\052\025" +
    "\045\001\001\000\012\022\043\023\120\024\052\025\045" +
    "\001\001\000\002\001\001\000\004\011\110\001\001\000" +
    "\010\022\107\024\052\025\045\001\001\000\010\022\106" +
    "\024\052\025\045\001\001\000\010\022\105\024\052\025" +
    "\045\001\001\000\010\022\073\024\052\025\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\104\025" +
    "\045\001\001\000\006\024\077\025\045\001\001\000\002" +
    "\001\001\000\004\025\103\001\001\000\004\025\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\043\023\114\024\052\025\045\001\001\000\002\001" +
    "\001\000\012\022\043\023\116\024\052\025\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\043\023\130\024\052\025\045\001\001\000\002\001\001" +
    "\000\012\022\043\023\132\024\052\025\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\143\020\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\153\001\001\000\002\001" +
    "\001\000\012\022\043\023\155\024\052\025\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\161\001\001\000\002\001\001\000\012\022\043" +
    "\023\163\024\052\025\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\167\001\001" +
    "\000\002\001\001\000\004\011\171\001\001\000\002\001" +
    "\001\000\004\011\173\001\001\000\002\001\001\000\012" +
    "\022\043\023\175\024\052\025\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            //
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // termino ::= ESPACIO 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termino ::= BOOLEAN_FALSE 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termino ::= BOOLEAN_TRUE 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termino ::= CADENA 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termino ::= ENTERO 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termino ::= IDENTIFICADOR 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termino ::= PARENIZQ expr PARENDER 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= termino 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= factor OP_DIV termino 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= factor OP_MULT termino 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_logicos ::= factor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("op_logicos",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_logicos ::= op_logicos OP_RESTA factor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("op_logicos",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_logicos ::= op_logicos OP_SUMA factor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("op_logicos",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= op_logicos 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr NEGATION op_logicos 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr POINT op_logicos 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr OP_IGUAL op_logicos 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr OP_MENORQ op_logicos 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr OP_MENORIGUALQ op_logicos 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= NEW type 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= IF expr THEN expr ELSE expr FI SEMI 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= IDENTIFICADOR PARENIZQ PARENDER 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= IDENTIFICADOR PARENIZQ expr PARENDER 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= IDENTIFICADOR PARENIZQ expr COMA expr PARENDER 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr ARROBA type POINT IDENTIFICADOR PARENIZQ expr COMA expr PARENDER 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= IDENTIFICADOR LEFT_ALLOC op_logicos 
            {
              Integer RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formalpica2 ::= COMA IDENTIFICADOR TWO_POINTS type 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("formalpica2",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formalapicaceroomuchos ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("formalapicaceroomuchos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formalapicaceroomuchos ::= formalpica2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("formalapicaceroomuchos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formalapicaceroomuchos ::= formalapicaceroomuchos formalpica2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("formalapicaceroomuchos",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formalpica ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("formalpica",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formalpica ::= IDENTIFICADOR TWO_POINTS type 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("formalpica",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // feauture2 ::= IDENTIFICADOR TWO_POINTS type 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("feauture2",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // feauture2 ::= IDENTIFICADOR TWO_POINTS type LEFT_ALLOC expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("feauture2",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // feauture2 ::= IDENTIFICADOR PARENIZQ formalpica formalapicaceroomuchos PARENDER SEMI TWO_POINTS type CBLEFT expr CBRIGHT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("feauture2",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // feauture2 ::= IDENTIFICADOR PARENIZQ formalpica PARENDER SEMI TWO_POINTS type CBLEFT expr CBRIGHT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("feauture2",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // feauture2 ::= IDENTIFICADOR PARENIZQ PARENDER TWO_POINTS type CBLEFT expr CBRIGHT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("feauture2",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // feauture ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("feauture",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // feauture ::= feauture2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("feauture",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // feauture ::= feauture feauture2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("feauture",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class2 ::= CBLEFT feauture SEMI CBRIGHT SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("class2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class2 ::= CBLEFT CBRIGHT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("class2",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class1 ::= INHERITS type class2 SEMI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("class1",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= SELF_TYPE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= TIPO_IO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= TIPO_OBJECT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= TIPO_BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= TIPO_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= TIPO_STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // chingada ::= class2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("chingada",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // chingada ::= class1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("chingada",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classdecl ::= CLASS type chingada 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("classdecl",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= classdecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program classdecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

